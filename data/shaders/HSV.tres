[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform float Hue : hint_range(-1, 1);
uniform float Saturation : hint_range(0, 5) = 1.0;
uniform float Brightness : hint_range(0, 5) = 1.0;
uniform vec3 multiplier = vec3(1,1,1);

vec3 rgb2hsv(vec3 c) {
	vec4 K = vec4(0.0, -1.0/3.0, 2.0/3.0, -1.0);
	vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
	vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
	
	float d = q.x - min(q.w, q.y);
	float e = 1.0e-10;
	return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}


void fragment() {
	vec4 screen_color = textureLod(SCREEN_TEXTURE, SCREEN_UV, 0.0);
	vec3 hsv = rgb2hsv(screen_color.rgb);
	hsv.x += mod(Hue, 1.0);
	hsv.y *= clamp(Saturation, 0.0, 5.0);
	hsv.z *= clamp(Brightness, 0.0, 5.0);
	screen_color.rgb = hsv2rgb(hsv);
	screen_color.rgb *= multiplier;
	COLOR=screen_color;
}"

[resource]
render_priority = -1
shader = SubResource( 1 )
shader_param/Hue = 0.0
shader_param/Saturation = 1.0
shader_param/Brightness = 1.253
shader_param/multiplier = Vector3( 1, 0.9, 0.725 )
